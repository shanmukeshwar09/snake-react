{"version":3,"sources":["Dumps/Constants.js","App.jsx","Dumps/Loop.js","index.js","App.module.css"],"names":["SNAKE","FOOD","DIRECTIONS","38","40","37","39","App","canvasRef","useRef","useState","snake","updateSnake","food","updateFood","direction","updateDirection","speed","updateSpeed","isRunning","updateIsRunning","buttonText","updateButtonText","useEffect","context","current","getContext","setTransform","clearRect","window","innerHeight","innerWidth","fillStyle","forEach","piece","fillRect","callback","delay","prevCallback","ID","setInterval","clearInterval","Loop","snakeHead","duplicateSnake","newHead","unshift","SIZE","map","_f","Math","floor","random","checkIfEat","pop","className","styles","container","tabIndex","onKeyDown","keyCode","prev","ref","width","height","onClick","event","textValue","target","innerHTML","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.69768437.chunk.js","sourcesContent":["const SIZE = 800;\nconst SPEED = 180;\nconst SNAKE = [\n  [0, 0],\n  [0, 1],\n];\nconst FOOD = [10, 10];\nconst SCALE = 40;\nconst DIRECTIONS = {\n  38: [0, -1], // up\n  40: [0, 1], // down\n  37: [-1, 0], // left\n  39: [1, 0], // right\n};\n\nexport { SIZE, SPEED, SCALE, SNAKE, FOOD, DIRECTIONS };\n","import React, { useEffect, useState, useRef } from \"react\";\nimport { SIZE, SPEED, SCALE, SNAKE, FOOD, DIRECTIONS } from \"./Dumps/Constants\";\nimport { Loop } from \"./Dumps/Loop\";\nimport \"./App.module.css\";\nimport styles from \"./App.module.css\";\n\nexport const App = () => {\n  const canvasRef = useRef();\n  const [snake, updateSnake] = useState(SNAKE);\n  const [food, updateFood] = useState(FOOD);\n  const [direction, updateDirection] = useState([0, 1]);\n  const [speed, updateSpeed] = useState(0);\n  const [isRunning, updateIsRunning] = useState(true);\n  const [buttonText, updateButtonText] = useState(\"Play Game\");\n\n  useEffect(() => {\n    const context = canvasRef.current.getContext(\"2d\");\n    context.setTransform(SCALE, 0, 0, SCALE, 0, 0);\n    context.clearRect(0, 0, window.innerHeight, window.innerWidth);\n    context.fillStyle = \"lightblue\";\n    snake.forEach((piece) => context.fillRect(piece[0], piece[1], 1, 1));\n    context.fillStyle = \"red\";\n    context.fillRect(food[0], food[1], 1, 1);\n  }, [snake, food]);\n\n  const checkIfDeath = (snakeHead) => {\n    if (\n      snakeHead[0] < 0 ||\n      snakeHead[1] < 0 ||\n      snakeHead[0] > SIZE / SCALE - 1 ||\n      snakeHead[1] > SIZE / SCALE - 1\n    ) {\n      return true;\n    }\n    return false;\n  };\n\n  const checkIfEat = (snakeHead) => {\n    if (snakeHead[0] === food[0] && snakeHead[1] === food[1]) {\n      updateFood(food.map((_f) => Math.floor((Math.random() * SIZE) / SCALE)));\n      return true;\n    }\n    return false;\n  };\n\n  Loop(() => {\n    const duplicateSnake = [...snake];\n    const newHead = [\n      duplicateSnake[0][0] + direction[0],\n      duplicateSnake[0][1] + direction[1],\n    ];\n\n    duplicateSnake.unshift(newHead);\n    if (checkIfDeath(duplicateSnake[0])) {\n      updateSpeed(0);\n      updateIsRunning(false);\n    } else {\n      if (!checkIfEat(duplicateSnake[0])) duplicateSnake.pop();\n      updateSnake(duplicateSnake);\n    }\n  }, speed);\n\n  const handleKeys = ({ keyCode }) => {\n    switch (keyCode) {\n      case 37:\n        if (direction[0] !== 1) updateDirection(DIRECTIONS[keyCode]);\n        break;\n      case 38:\n        if (direction[1] !== 1) updateDirection(DIRECTIONS[keyCode]);\n        break;\n      case 39:\n        if (direction[0] !== -1) updateDirection(DIRECTIONS[keyCode]);\n        break;\n      case 40:\n        if (direction[1] !== -1) updateDirection(DIRECTIONS[keyCode]);\n        break;\n      case 32:\n        updateSpeed((prev) => (prev ? 0 : SPEED));\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleButtonClick = (event) => {\n    const textValue = event.target.innerHTML;\n    if (textValue === \"Play Game\" || textValue === \"Resume Game\") {\n      updateSpeed(SPEED);\n      updateButtonText(\"Pause Game\");\n    } else if (textValue === \"Pause Game\") {\n      updateSpeed(0);\n      updateButtonText(\"Resume Game\");\n    }\n  };\n\n  return (\n    <>\n      {isRunning ? (\n        <div className={styles.container}>\n          <canvas\n            tabIndex={0}\n            onKeyDown={handleKeys}\n            ref={canvasRef}\n            width={`${SIZE}px`}\n            height={`${SIZE}px`}\n          />\n          <button onClick={handleButtonClick}>{buttonText}</button>\n        </div>\n      ) : (\n        <div>Game Over</div>\n      )}\n    </>\n  );\n};\n","import { useEffect, useRef } from \"react\";\n\nexport const Loop = (callback, delay) => {\n  const prevCallback = useRef();\n  useEffect(() => {\n    prevCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    if (delay) {\n      const ID = setInterval(() => prevCallback.current(), delay);\n      return () => clearInterval(ID);\n    }\n  }, [delay]);\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};"],"sourceRoot":""}